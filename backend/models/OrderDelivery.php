<?php


namespace backend\models;


use yii\db\ActiveRecord;

/**
 * Class OrderDelivery
 * @package backend\models
 * @property int $id [int(11)]
 * @property string $order_info [varchar(255)]
 * @property int $category_id [int(11)]
 * @property int $package_size [int(11)]
 * @property string $photo [varchar(255)]
 * @property string $from_address [varchar(255)]
 * @property bool $from_me [tinyint(1)]
 * @property string $giver_name [varchar(255)]
 * @property string $giver_phone [varchar(255)]
 * @property string $giver_email [varchar(255)]
 * @property string $to_address [varchar(255)]
 * @property bool $to_me [tinyint(1)]
 * @property string $taker_name [varchar(255)]
 * @property string $taker_phone [varchar(255)]
 * @property string $taker_email [varchar(255)]
 * @property int $urgency [int(11)]
 * @property int $deadline [timestamp]
 * @property string $comment [varchar(255)]
 * @property int $created_at [timestamp]  Дата создания
 * @property int $updated_at [timestamp]  Дата редактирования
 */

class OrderDelivery extends Delivery
{
    public static function tableName()
    {
        return '{{%order_delivery}}'; // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        return [
            [
                [
                    'from_address', 'to_address', 'package_size',
                ], 'required'
            ],
            [
                [
                    'from_address', 'to_address', 'comment', 'order_info', 'giver_name', 'giver_phone',
                    'taker_name', 'taker_phone', 'deadline'
                ], 'string'
            ],
            [
                [
                    'created_at', 'updated_at'
                ], 'safe'
            ],
            [
                [
                    'photo'
                ], 'safe'
            ],
            [
                [
                    'category_id', 'package_size', 'urgency'
                ], 'integer'
            ],
            [
                [
                    'from_me', 'to_me'
                ], 'boolean'
            ],
            [
                [
                    'giver_email', 'taker_email'
                ], 'email'
            ],
        ];
    }

    public function getCategory() {
        return $this->hasOne(Categories::class, ['id' => 'category_id']);
    }

    public function beforeSave($insert)
    {
        $oldPhotos = self::findOne(['id' => $this->id])->photo;
        $newPhotos = \Yii::$app->session->get(\Yii::$app->session->id);

        if (is_array($this->photo) && !$this->photo[0]) {
            if ($oldPhotos && $newPhotos) {
                $res = array_merge(json_decode($newPhotos), json_decode($oldPhotos));
                $this->photo = json_encode($res);
            }
            elseif ($newPhotos) {
                $this->photo = $newPhotos;
            } elseif($oldPhotos) {
                $this->photo = $oldPhotos;
            } else {
                $this->photo = '';
            }
            \Yii::$app->session->destroy();
        }

        return parent::beforeSave($insert);
    }
}